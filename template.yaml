AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  macro-acct-integration

  SAM Template for macro-acct-integration

Globals:
  Function:
    Runtime: python3.9
    Timeout: 30
    MemorySize: 512
    Handler: main.handler

Parameters:
  IntegrationBucketName:
    Type: String
    Default: macroscope-test-integration

  SnsTopicArn:
    Type: String
    Default: arn:aws:sns:us-east-2:451846548917:mickey-infra-eng-interview

  SnsRegion:
    Type: String
    Default: us-east-2

  MacroscopeS3Bucket:
    Type: String
    Default: macroscope-interviews

  MacroscopeS3BucketRole:
    Type: String
    Default: 'arn:aws:iam::451846548917:role/mickey-interview-CandidateCrossAccountRole-1K16TWUUK3NHF'

  MacroscopeAcctId:
    Type: String
    Default: '451846548917'

  MacroscopeS3OutputPath:
    Type: String
    Default: '/infra-eng/mickey/output/'

Resources:
  BucketIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: lambda_log
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
        - PolicyName: lambda_sts
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: !Ref MacroscopeS3BucketRole
        - PolicyName: lambda_s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                - s3:Delete*
                - s3:Get*
                - s3:List*
                - s3:Put*
              Resource: !Sub 'arn:aws:s3:::${IntegrationBucketName}'

  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Shared functionality between lambdas
      ContentUri: layers/shared
    Metadata:
      BuildMethod: python3.9

  HandleMacroSNSEventFunction:
    Type: AWS::Serverless::Function
    DependsOn: BucketIamRole
    Properties:
      CodeUri: handle_macro_sns_event/
      Role: !GetAtt BucketIamRole.Arn
      Environment:
        Variables:
          SOURCE_S3_BUCKET: !Ref MacroscopeS3Bucket
          SOURCE_S3_BUCKET_ROLE: !Ref MacroscopeS3BucketRole
          TARGET_S3_BUCKET: !Ref IntegrationBucketName
      Layers:
        - !Ref SharedLayer

  LambdaSNSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      SourceArn: !Ref SnsTopicArn
      FunctionName: !Ref HandleMacroSNSEventFunction
      Principal: sns.amazonaws.com

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Region: !Ref SnsRegion
      TopicArn: !Ref SnsTopicArn
      Protocol: lambda
      Endpoint: !GetAtt HandleMacroSNSEventFunction.Arn

  HandleS3EventFunction:
    Type: AWS::Serverless::Function
    DependsOn: BucketIamRole
    Properties:
      CodeUri: handle_s3_event/
      Role: !GetAtt BucketIamRole.Arn
      Environment:
        Variables:
          TARGET_S3_BUCKET: !Ref MacroscopeS3Bucket
          TARGET_S3_PREFIX: !Ref MacroscopeS3OutputPath
          TARGET_S3_BUCKET_ROLE: !Ref MacroscopeS3BucketRole
          SOURCE_S3_BUCKET: !Ref IntegrationBucketName
      Layers:
        - !Ref SharedLayer

  LambdaS3Permission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt HandleS3EventFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${IntegrationBucketName}'

  S3Bucket:
      Type: AWS::S3::Bucket
      DependsOn: LambdaS3Permission
      Properties:
        BucketName: !Ref IntegrationBucketName

  MacroIntegrationBucketCrossAcctRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref MacroscopeAcctId
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: integration_s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:ListObject
              Resource: !Sub 'arn:aws:s3:::${IntegrationBucketName}/*'
              Condition:
                StringLike:
                  s3:prefix:
                    - 'ms-*'
